const c=(e,r,t)=>{try{e[r]=t}catch{}if(e[r]===t)return t;let o;const i=Object.getOwnPropertyDescriptor(e,r)||{enumerable:!0,configurable:!0};if(i.get)throw new Error(`Probably a wrong ides to overwrite ${String(r)} getter`);try{Object.defineProperty(e,r,{...i,value:t})}catch(f){o=f}if(e[r]!==t)throw o||new Error("Can't assign");return t};class u extends Error{constructor(r){if(super("Wrong assertion encountered"+(r?`: "${r}"`:"")),this.originalMessage=r,Object.setPrototypeOf(this,new.target.prototype),!!this.stack)try{c(this,"stack",this.stack.split(`
`).filter((...[,t])=>t!==1&&t!==2).join(`
`))}catch{}}}let n;function d(e,r){if(arguments.length===0&&(e=!0),n!==void 0){n=void 0;return}if(!e)throw new u(typeof r=="function"?r():r)}const s="Wrong usage of the `is` function refer to https://docs.tsafe.dev/is";function a(e){const r={};if(n!==void 0)throw n=void 0,new Error(s);return n=r,Promise.resolve().then(()=>{if(n===r)throw new Error(s)}),null}export{d as a,a as i};
